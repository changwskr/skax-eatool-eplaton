[이번에는 zuul을 이용하는 것이 아닌 cloud gateway를 이용해서 서비스해보자]
	first-service, second-service, apigateway

● 주의 라우팅 정보 읽기
	- '/first-service/'로 요청되는 메시지는 MY-FIRST-SERVICE로 라우팅 하겠다.
      routes:
        - id: first-service
          uri: http://locahost:8081
          predicates:
            - Path=/first-service/**

● spring-cloud-gateway 의 주요특징
	- 비동기식 처리가 가능하다.
	- 기존의 zuul은 동기식 처리만 가능했다. 최신 트렌드에 맞지 않네 2.0부터는 지원한다고 했는데 잘 안됨
	- spring cloud gateway는 netty가 게이트웨이서버로 사용된다. netty를 사용함으로서 비동기처리가 가능해진다는 것이다.

● 라우팅 정보를 등록하자
spring:
  application:
    name: apigateway-service
  #--------------------------------------------------------------------------------------------------------------
  cloud:
    gateway:
      routes:      
        - id: first-service
          uri: http://127.0.0.1:8081  # 실제 요청이 http://127.0.0.1:8081/first-service/** 요렇게 된다는 말이다. 
#          uri: lb://MY-FIRST-SERVICE  # (컨테이너로 변경시 적용)          
                
          predicates:
            - Path=/first-service/**   # /first-service/welcome, /first-service/check ......이렇게 요청이 들어오는 모든 것
        - id: second-service
          uri: http://127.0.0.1:8082
#          uri: lb://MY-SECOND-SERVICE      # (컨테이너로 변경시 적용)
          predicates:
            - Path=/second-service/**
        - id: third-service
          uri: http://127.0.0.1:8083
#          uri: lb://MY-THIRD-SERVICE          # (컨테이너로 변경시 적용)
          predicates:
            - Path=/third-service/**
● 소스작업을 하자
          uri: http://127.0.0.1:8081  # 실제 요청이 http://127.0.0.1:8081/first-service/** 요렇게 된다는 말이다. 
          predicates:
            - Path=/first-service/**   # /first-service/welcome, /first-service/check ......이렇게 요청이 들어오는 모든 것

	이렇게 되어 있어므로 firstcontroller와 secondcontroller에       
	@RestController
	@RequestMapping("/first-service")
	@Slf4j
	public class FirstServiceController {
    	Environment env;
	}  
            
● 테스트
	- 직접호출 http://localhost:8081/first-service/welcome
					http://localhost:8082/second-service/welcome
	- 게이트웨이 호출	http://localhost:8000/first-service/welcome