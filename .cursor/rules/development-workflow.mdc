# 개발 워크플로우

## Git 브랜치 전략

### 브랜치 구조
- **main**: 운영 배포용
- **develop**: 통합 개발용
- **feature/**: 기능 개발용
- **bugfix/**: 버그 수정용
- **release/**: 릴리스 준비용
- **hotfix/**: 긴급 수정용

### 브랜치 워크플로우
```bash
# 1. 기능 개발 시작
git checkout develop
git pull origin develop
git checkout -b feature/user-management

# 2. 개발 작업
git add .
git commit -m "feat: 사용자 관리 기능 추가"
git push origin feature/user-management

# 3. Pull Request 생성
# develop 브랜치로 머지 요청

# 4. 릴리스 준비
git checkout develop
git checkout -b release/v1.2.0
# 버그 수정 및 문서 업데이트
git checkout main
git merge release/v1.2.0
git tag -a v1.2.0 -m "Release version 1.2.0"
```

## 커밋 메시지 규칙

### 형식
```
<type>(<scope>): <subject>

타입:
- feat: 새로운 기능
- fix: 버그 수정
- docs: 문서 수정
- style: 코드 스타일 변경
- refactor: 코드 리팩토링
- test: 테스트 추가/수정
- chore: 빌드 프로세스 변경

예시:
feat(user): 사용자 등록 기능 추가
fix(auth): 로그인 인증 오류 수정
```

## 코드 리뷰 체크리스트

### 기능적 검토
- [ ] 요구사항을 정확히 구현했는가?
- [ ] 예외 상황을 고려했는가?
- [ ] 성능에 문제는 없는가?

### 코드 품질
- [ ] 코드 스타일을 준수했는가?
- [ ] 중복 코드가 없는가?
- [ ] 메서드가 너무 길지 않은가?
- [ ] 변수명이 명확한가?

### 보안
- [ ] SQL 인젝션 방지
- [ ] XSS 방지
- [ ] 인증/인가 검증
- [ ] 민감한 정보 노출 방지

### 테스트
- [ ] 단위 테스트 커버리지
- [ ] 통합 테스트 구현
- [ ] 엣지 케이스 테스트

## 빌드 및 배포

### Maven 명령어
```bash
# 전체 빌드
mvn clean install -DskipTests

# 개별 모듈 빌드
mvn clean install -pl mbc-java -DskipTests

# 테스트 실행
mvn test

# Spring Boot 실행
mvn spring-boot:run
```

### 코드 품질 검사
```bash
# 전체 품질 검사
mvn clean install -P quality

# 개별 도구 실행
mvn checkstyle:check
mvn spotbugs:check
mvn jacoco:report
```

## 문제 해결

### 자주 발생하는 문제
1. **JAR 파일 누락**: [BUILD_TROUBLESHOOTING.md](mdc:BUILD_TROUBLESHOOTING.md) 참조
2. **인코딩 문제**: UTF-8 설정 확인
3. **의존성 충돌**: `mvn dependency:tree` 확인
4. **메모리 부족**: JVM 힙 크기 조정

### 디버깅 도구
- **JProfiler**: CPU/메모리 프로파일링
- **VisualVM**: JVM 모니터링
- **Eclipse MAT**: 메모리 분석
- **Spring Boot DevTools**: 개발 편의성
description:
globs:
alwaysApply: false
---
