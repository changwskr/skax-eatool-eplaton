# Backend Database Guide

## 🗄️ **SKAX EA Tool Eplaton Database Implementation Rules**

### **🏗️ 데이터베이스 아키텍처 개요**

```
📦 Database Layer Architecture
├── 🎯 Repository Layer (레포지토리 레이어)
│   ├── Interface Definition
│   ├── Implementation Classes
│   ├── Type Safety
│   └── Error Handling
├── 🔧 Data Access Layer (데이터 액세스 레이어)
│   ├── MyBatis Mapper
│   ├── JPA Repository
│   ├── JDBC Template
│   └── Connection Pool
├── 💾 Entity & DTO Layer (엔티티 & DTO 레이어)
│   ├── Entity Classes
│   ├── DTO Classes
│   ├── Type Mapping
│   └── Validation
└── 📊 Database Configuration
    ├── Connection Pool
    ├── Transaction Management
    ├── Query Optimization
    └── Monitoring & Logging
```

### **🎯 MUST FOLLOW - 데이터베이스 구현 규칙**

#### **1. Repository 패턴 구현**

**✅ 올바른 Repository 인터페이스 구조**
```java
/**
 * 사용자 관리 Repository 인터페이스
 * 
 * 프로그램명: UserRepository.java
 * 설명: 사용자 데이터 접근을 위한 Repository 인터페이스
 * 작성일: 2024-01-01
 * 작성자: SKAX Project Team
 * 
 * 주요 기능:
 * - 사용자 CRUD 작업
 * - 사용자 검색 및 조회
 * - 타입 안전성 보장
 * 
 * @version 1.0
 */
public interface UserRepository {
    
    /**
     * 사용자 조회
     * 
     * @param userDDTO 사용자 조회 조건
     * @return 사용자 정보
     * @throws NewBusinessException 비즈니스 예외
     */
    User getUser(UserDDTO userDDTO) throws NewBusinessException;
    
    /**
     * 사용자 목록 조회
     * 
     * @param userDDTO 사용자 조회 조건
     * @return 사용자 목록
     * @throws NewBusinessException 비즈니스 예외
     */
    List<User> getListUser(UserDDTO userDDTO) throws NewBusinessException;
    
    /**
     * 사용자 생성
     * 
     * @param userDDTO 사용자 정보
     * @return 생성된 행 수
     * @throws NewBusinessException 비즈니스 예외
     */
    int insertUser(UserDDTO userDDTO) throws NewBusinessException;
    
    /**
     * 사용자 수정
     * 
     * @param userDDTO 사용자 정보
     * @return 수정된 행 수
     * @throws NewBusinessException 비즈니스 예외
     */
    int updateUser(UserDDTO userDDTO) throws NewBusinessException;
    
    /**
     * 사용자 삭제
     * 
     * @param userDDTO 사용자 정보
     * @return 삭제된 행 수
     * @throws NewBusinessException 비즈니스 예외
     */
    int deleteUser(UserDDTO userDDTO) throws NewBusinessException;
    
    /**
     * 사용자 ID로 조회
     * 
     * @param userId 사용자 ID
     * @return 사용자 정보
     * @throws NewBusinessException 비즈니스 예외
     */
    User getUserById(String userId) throws NewBusinessException;
    
    /**
     * 이메일로 사용자 조회
     * 
     * @param email 이메일
     * @return 사용자 정보
     * @throws NewBusinessException 비즈니스 예외
     */
    User getUserByEmail(String email) throws NewBusinessException;
    
    /**
     * 사용자 존재 여부 확인
     * 
     * @param userId 사용자 ID
     * @return 존재 여부
     * @throws NewBusinessException 비즈니스 예외
     */
    boolean existsUser(String userId) throws NewBusinessException;
}
```

#### **2. Repository 구현체**

**✅ MyBatis Repository 구현**
```java
/**
 * 사용자 관리 MyBatis Repository 구현체
 * 
 * 프로그램명: UserMyBatisRepository.java
 * 설명: MyBatis를 사용한 사용자 관리 Repository 구현
 * 작성일: 2024-01-01
 * 작성자: SKAX Project Team
 * 
 * 주요 기능:
 * - 사용자 목록 조회
 * - 사용자 상세 조회
 * - 사용자 등록/수정/삭제
 * - 페이징 및 트리 구조 지원
 * 
 * @version 1.0
 */
@Repository
@Profile("mybatis")
public class UserMyBatisRepository implements UserRepository {
    
    private NewIKesaLogger logger = NewKesaLogHelper.getBiz();
    private static final Logger slf4jLogger = LoggerFactory.getLogger(UserMyBatisRepository.class);
    
    @Autowired
    private UserMapper userMapper;
    
    @Override
    public List<User> getListUser(UserDDTO userDDTO) throws NewBusinessException {
        logger.info("UserMyBatisRepository", "=== UserMyBatisRepository.getListUser START ===");
        slf4jLogger.info("=== UserMyBatisRepository.getListUser START (SLF4J) ===");
        
        try {
            logger.debug("UserMyBatisRepository.getListUser called");
            List<User> userList = userMapper.findBySearchCondition(userDDTO);
            
            logger.info("UserMyBatisRepository", "=== UserMyBatisRepository.getListUser END ===");
            slf4jLogger.info("=== UserMyBatisRepository.getListUser END (SLF4J) ===");
            return userList;
            
        } catch (Exception e) {
            logger.error("Error in getListUser: " + e.getMessage(), String.valueOf(e));
            slf4jLogger.error("Error in getListUser: " + e.getMessage(), e);
            logger.info("UserMyBatisRepository", "=== UserMyBatisRepository.getListUser END ===");
            slf4jLogger.info("=== UserMyBatisRepository.getListUser END (SLF4J) ===");
            throw new NewBusinessException("B0000001", "getListUser", e);
        }
    }
    
    @Override
    public int insertUser(UserDDTO userDDTO) throws NewBusinessException {
        logger.info("UserMyBatisRepository", "=== UserMyBatisRepository.insertUser START ===");
        
        try {
            int result = userMapper.insertUser(userDDTO);
            logger.info("UserMyBatisRepository", "=== UserMyBatisRepository.insertUser END ===");
            return result;
            
        } catch (Exception e) {
            logger.error("Error in insertUser: " + e.getMessage(), String.valueOf(e));
            throw new NewBusinessException("B0000002", "insertUser", e);
        }
    }
    
    @Override
    public int updateUser(UserDDTO userDDTO) throws NewBusinessException {
        logger.info("UserMyBatisRepository", "=== UserMyBatisRepository.updateUser START ===");
        
        try {
            int result = userMapper.updateUser(userDDTO);
            logger.info("UserMyBatisRepository", "=== UserMyBatisRepository.updateUser END ===");
            return result;
            
        } catch (Exception e) {
            logger.error("Error in updateUser: " + e.getMessage(), String.valueOf(e));
            throw new NewBusinessException("B0000003", "updateUser", e);
        }
    }
    
    @Override
    public int deleteUser(UserDDTO userDDTO) throws NewBusinessException {
        logger.info("UserMyBatisRepository", "=== UserMyBatisRepository.deleteUser START ===");
        
        try {
            int result = userMapper.deleteUser(userDDTO);
            logger.info("UserMyBatisRepository", "=== UserMyBatisRepository.deleteUser END ===");
            return result;
            
        } catch (Exception e) {
            logger.error("Error in deleteUser: " + e.getMessage(), String.valueOf(e));
            throw new NewBusinessException("B0000004", "deleteUser", e);
        }
    }
    
    @Override
    public User getUserById(String userId) throws NewBusinessException {
        logger.info("UserMyBatisRepository", "=== UserMyBatisRepository.getUserById START ===");
        
        try {
            User user = userMapper.selectUserById(userId);
            logger.info("UserMyBatisRepository", "=== UserMyBatisRepository.getUserById END ===");
            return user;
            
        } catch (Exception e) {
            logger.error("Error in getUserById: " + e.getMessage(), String.valueOf(e));
            throw new NewBusinessException("B0000005", "getUserById", e);
        }
    }
    
    @Override
    public User getUserByEmail(String email) throws NewBusinessException {
        logger.info("UserMyBatisRepository", "=== UserMyBatisRepository.getUserByEmail START ===");
        
        try {
            User user = userMapper.selectUserByEmail(email);
            logger.info("UserMyBatisRepository", "=== UserMyBatisRepository.getUserByEmail END ===");
            return user;
            
        } catch (Exception e) {
            logger.error("Error in getUserByEmail: " + e.getMessage(), String.valueOf(e));
            throw new NewBusinessException("B0000006", "getUserByEmail", e);
        }
    }
    
    @Override
    public boolean existsUser(String userId) throws NewBusinessException {
        logger.info("UserMyBatisRepository", "=== UserMyBatisRepository.existsUser START ===");
        
        try {
            int count = userMapper.countUserById(userId);
            boolean exists = count > 0;
            logger.info("UserMyBatisRepository", "=== UserMyBatisRepository.existsUser END ===");
            return exists;
            
        } catch (Exception e) {
            logger.error("Error in existsUser: " + e.getMessage(), String.valueOf(e));
            throw new NewBusinessException("B0000007", "existsUser", e);
        }
    }
}
```

#### **3. MyBatis Mapper 인터페이스**

**✅ 타입 안전한 Mapper 인터페이스**
```java
/**
 * 사용자 MyBatis Mapper 인터페이스
 * 
 * 프로그램명: UserMapper.java
 * 설명: 사용자 데이터베이스 작업을 위한 MyBatis Mapper
 * 작성일: 2024-01-01
 * 작성자: SKAX Project Team
 * 
 * 주요 기능:
 * - 사용자 CRUD SQL 매핑
 * - 동적 쿼리 처리
 * - 타입 안전성 보장
 * 
 * @version 1.0
 */
@Mapper
public interface UserMapper {
    
    /**
     * 검색 조건으로 사용자 목록 조회
     * 
     * @param userDDTO 검색 조건
     * @return 사용자 목록
     */
    List<User> findBySearchCondition(UserDDTO userDDTO);
    
    /**
     * 사용자 ID로 조회
     * 
     * @param userId 사용자 ID
     * @return 사용자 정보
     */
    User selectUserById(String userId);
    
    /**
     * 이메일로 사용자 조회
     * 
     * @param email 이메일
     * @return 사용자 정보
     */
    User selectUserByEmail(String email);
    
    /**
     * 사용자 등록
     * 
     * @param userDDTO 사용자 정보
     * @return 등록된 행 수
     */
    int insertUser(UserDDTO userDDTO);
    
    /**
     * 사용자 수정
     * 
     * @param userDDTO 사용자 정보
     * @return 수정된 행 수
     */
    int updateUser(UserDDTO userDDTO);
    
    /**
     * 사용자 삭제
     * 
     * @param userDDTO 사용자 정보
     * @return 삭제된 행 수
     */
    int deleteUser(UserDDTO userDDTO);
    
    /**
     * 사용자 ID 존재 여부 확인
     * 
     * @param userId 사용자 ID
     * @return 존재하는 행 수
     */
    int countUserById(String userId);
    
    /**
     * 이메일 존재 여부 확인
     * 
     * @param email 이메일
     * @return 존재하는 행 수
     */
    int countUserByEmail(String email);
    
    /**
     * 페이징을 위한 사용자 목록 조회
     * 
     * @param userDDTO 검색 조건
     * @return 사용자 목록
     */
    List<User> selectUserListWithPaging(UserDDTO userDDTO);
    
    /**
     * 사용자 총 개수 조회
     * 
     * @param userDDTO 검색 조건
     * @return 총 개수
     */
    int selectUserCount(UserDDTO userDDTO);
}
```

#### **4. MyBatis XML Mapper**

**✅ 타입 안전한 XML Mapper**
```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.skax.eatool.mbc.dc.usermgtdc.mapper.UserMapper">

    <!-- 결과 맵 정의 -->
    <resultMap id="UserResultMap" type="com.skax.eatool.mbc.dc.usermgtdc.dto.UserDto">
        <id column="USER_ID" property="userId" jdbcType="VARCHAR"/>
        <result column="USER_NAME" property="userName" jdbcType="VARCHAR"/>
        <result column="EMAIL" property="email" jdbcType="VARCHAR"/>
        <result column="PHONE" property="phone" jdbcType="VARCHAR"/>
        <result column="ROLE" property="role" jdbcType="VARCHAR"/>
        <result column="STATUS" property="status" jdbcType="VARCHAR"/>
        <result column="CREATED_DATE" property="createdDate" jdbcType="TIMESTAMP"/>
        <result column="UPDATED_DATE" property="updatedDate" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 사용자 목록 조회 -->
    <select id="selectUserList" resultMap="UserResultMap" parameterType="com.skax.eatool.mbc.dc.usermgtdc.Page">
        SELECT 
            USER_ID,
            USER_NAME,
            EMAIL,
            PHONE,
            ROLE,
            STATUS,
            CREATED_DATE,
            UPDATED_DATE
        FROM USER_INFO
        <where>
            <if test="searchKeyword != null and searchKeyword != ''">
                AND (USER_NAME LIKE CONCAT('%', #{searchKeyword}, '%')
                OR EMAIL LIKE CONCAT('%', #{searchKeyword}, '%'))
            </if>
            <if test="role != null and role != ''">
                AND ROLE = #{role}
            </if>
            <if test="status != null and status != ''">
                AND STATUS = #{status}
            </if>
        </where>
        ORDER BY CREATED_DATE DESC
        <if test="pageSize > 0">
            LIMIT #{pageSize} OFFSET #{offset}
        </if>
    </select>

    <!-- 사용자 총 개수 조회 -->
    <select id="selectUserCount" resultType="int" parameterType="com.skax.eatool.mbc.dc.usermgtdc.Page">
        SELECT COUNT(*)
        FROM USER_INFO
        <where>
            <if test="searchKeyword != null and searchKeyword != ''">
                AND (USER_NAME LIKE CONCAT('%', #{searchKeyword}, '%')
                OR EMAIL LIKE CONCAT('%', #{searchKeyword}, '%'))
            </if>
            <if test="role != null and role != ''">
                AND ROLE = #{role}
            </if>
            <if test="status != null and status != ''">
                AND STATUS = #{status}
            </if>
        </where>
    </select>

    <!-- 사용자 ID로 조회 -->
    <select id="selectUserById" parameterType="string" resultMap="UserResultMap">
        SELECT 
            USER_ID,
            USER_NAME,
            EMAIL,
            PHONE,
            ROLE,
            STATUS,
            CREATED_DATE,
            UPDATED_DATE
        FROM USER_INFO
        WHERE USER_ID = #{userId}
    </select>

    <!-- 이메일로 사용자 조회 -->
    <select id="selectUserByEmail" parameterType="string" resultMap="UserResultMap">
        SELECT 
            USER_ID,
            USER_NAME,
            EMAIL,
            PHONE,
            ROLE,
            STATUS,
            CREATED_DATE,
            UPDATED_DATE
        FROM USER_INFO
        WHERE EMAIL = #{email}
    </select>

    <!-- 사용자 등록 -->
    <insert id="insertUser" parameterType="com.skax.eatool.mbc.dc.usermgtdc.dto.UserDDTO">
        INSERT INTO USER_INFO (
            USER_ID,
            USER_NAME,
            EMAIL,
            PHONE,
            ROLE,
            STATUS,
            CREATED_DATE,
            UPDATED_DATE
        ) VALUES (
            #{userId},
            #{userName},
            #{email},
            #{phone},
            #{role},
            #{status},
            NOW(),
            NOW()
        )
    </insert>

    <!-- 사용자 수정 -->
    <update id="updateUser" parameterType="com.skax.eatool.mbc.dc.usermgtdc.dto.UserDDTO">
        UPDATE USER_INFO
        SET 
            USER_NAME = #{userName},
            EMAIL = #{email},
            PHONE = #{phone},
            ROLE = #{role},
            STATUS = #{status},
            UPDATED_DATE = NOW()
        WHERE USER_ID = #{userId}
    </update>

    <!-- 사용자 삭제 -->
    <delete id="deleteUser" parameterType="com.skax.eatool.mbc.dc.usermgtdc.dto.UserDDTO">
        DELETE FROM USER_INFO
        WHERE USER_ID = #{userId}
    </delete>

    <!-- 사용자 ID 존재 여부 확인 -->
    <select id="countUserById" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM USER_INFO
        WHERE USER_ID = #{userId}
    </select>

    <!-- 이메일 존재 여부 확인 -->
    <select id="countUserByEmail" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM USER_INFO
        WHERE EMAIL = #{email}
    </select>

    <!-- 검색 조건으로 사용자 목록 조회 -->
    <select id="findBySearchCondition" parameterType="com.skax.eatool.mbc.dc.usermgtdc.dto.UserDDTO" resultMap="UserResultMap">
        SELECT 
            USER_ID,
            USER_NAME,
            EMAIL,
            PHONE,
            ROLE,
            STATUS,
            CREATED_DATE,
            UPDATED_DATE
        FROM USER_INFO
        <where>
            <if test="userId != null and userId != ''">
                AND USER_ID = #{userId}
            </if>
            <if test="userName != null and userName != ''">
                AND USER_NAME LIKE CONCAT('%', #{userName}, '%')
            </if>
            <if test="email != null and email != ''">
                AND EMAIL = #{email}
            </if>
            <if test="role != null and role != ''">
                AND ROLE = #{role}
            </if>
            <if test="status != null and status != ''">
                AND STATUS = #{status}
            </if>
        </where>
        ORDER BY CREATED_DATE DESC
    </select>

    <!-- 페이징을 위한 사용자 목록 조회 -->
    <select id="selectUserListWithPaging" parameterType="com.skax.eatool.mbc.dc.usermgtdc.dto.UserDDTO" resultMap="UserResultMap">
        SELECT 
            USER_ID,
            USER_NAME,
            EMAIL,
            PHONE,
            ROLE,
            STATUS,
            CREATED_DATE,
            UPDATED_DATE
        FROM USER_INFO
        <where>
            <if test="searchKeyword != null and searchKeyword != ''">
                AND (USER_NAME LIKE CONCAT('%', #{searchKeyword}, '%')
                OR EMAIL LIKE CONCAT('%', #{searchKeyword}, '%'))
            </if>
            <if test="role != null and role != ''">
                AND ROLE = #{role}
            </if>
            <if test="status != null and status != ''">
                AND STATUS = #{status}
            </if>
        </where>
        ORDER BY CREATED_DATE DESC
        <if test="startRow != null and endRow != null">
            LIMIT #{endRow} OFFSET #{startRow}
        </if>
    </select>

    <!-- 사용자 총 개수 조회 (검색 조건 포함) -->
    <select id="selectUserCount" parameterType="com.skax.eatool.mbc.dc.usermgtdc.dto.UserDDTO" resultType="int">
        SELECT COUNT(*)
        FROM USER_INFO
        <where>
            <if test="searchKeyword != null and searchKeyword != ''">
                AND (USER_NAME LIKE CONCAT('%', #{searchKeyword}, '%')
                OR EMAIL LIKE CONCAT('%', #{searchKeyword}, '%'))
            </if>
            <if test="role != null and role != ''">
                AND ROLE = #{role}
            </if>
            <if test="status != null and status != ''">
                AND STATUS = #{status}
            </if>
        </where>
    </select>

</mapper>
```

#### **5. Entity 및 DTO 클래스**

**✅ 타입 안전한 Entity 클래스**
```java
/**
 * 사용자 엔티티 클래스
 * 
 * 프로그램명: User.java
 * 설명: 사용자 정보를 담는 엔티티 클래스
 * 작성일: 2024-01-01
 * 작성자: SKAX Project Team
 * 
 * 주요 기능:
 * - 사용자 기본 정보 관리
 * - JDBC Template 매핑
 * - 타입 안전성 보장
 * 
 * @version 1.0
 */
public class User extends BaseEntity {

    private Long userId;
    private String userName;
    private String email;
    private String phone;
    private UserStatus status = UserStatus.ACTIVE;
    private LocalDateTime lastLoginDate;

    // 기본 생성자
    public User() {}

    // 생성자
    public User(String userName, String email, String phone) {
        this.userName = userName;
        this.email = email;
        this.phone = phone;
        this.status = UserStatus.ACTIVE;
    }

    // Getters and Setters
    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public UserStatus getStatus() {
        return status;
    }

    public void setStatus(UserStatus status) {
        this.status = status;
    }

    public LocalDateTime getLastLoginDate() {
        return lastLoginDate;
    }

    public void setLastLoginDate(LocalDateTime lastLoginDate) {
        this.lastLoginDate = lastLoginDate;
    }

    /**
     * 사용자 상태 열거형
     */
    public enum UserStatus {
        ACTIVE, INACTIVE, SUSPENDED, DELETED
    }

    @Override
    public String toString() {
        return "User{" +
                "userId=" + userId +
                ", userName='" + userName + '\'' +
                ", email='" + email + '\'' +
                ", phone='" + phone + '\'' +
                ", status=" + status +
                ", lastLoginDate=" + lastLoginDate +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return Objects.equals(userId, user.userId) &&
                Objects.equals(email, user.email);
    }

    @Override
    public int hashCode() {
        return Objects.hash(userId, email);
    }
}
```

**✅ 타입 안전한 DTO 클래스**
```java
/**
 * 사용자 DTO 클래스
 * 
 * 프로그램명: UserDDTO.java
 * 설명: 사용자 데이터 전송을 위한 DTO 클래스
 * 작성일: 2024-01-01
 * 작성자: SKAX Project Team
 * 
 * 주요 기능:
 * - 사용자 데이터 전송
 * - 타입 안전성 보장
 * - 검증 로직 포함
 * 
 * @version 1.0
 */
public class UserDDTO extends NewAbstractDTO {

    private String userId;
    private String userName;
    private String email;
    private String phone;
    private String role;
    private String status;
    private String searchKeyword;
    private Integer startRow;
    private Integer endRow;
    private Integer pageSize;
    private Integer offset;

    // 기본 생성자
    public UserDDTO() {}

    // 생성자
    public UserDDTO(String userId, String userName, String email) {
        this.userId = userId;
        this.userName = userName;
        this.email = email;
    }

    // Getters and Setters
    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getSearchKeyword() {
        return searchKeyword;
    }

    public void setSearchKeyword(String searchKeyword) {
        this.searchKeyword = searchKeyword;
    }

    public Integer getStartRow() {
        return startRow;
    }

    public void setStartRow(Integer startRow) {
        this.startRow = startRow;
    }

    public Integer getEndRow() {
        return endRow;
    }

    public void setEndRow(Integer endRow) {
        this.endRow = endRow;
    }

    public Integer getPageSize() {
        return pageSize;
    }

    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    public Integer getOffset() {
        return offset;
    }

    public void setOffset(Integer offset) {
        this.offset = offset;
    }

    /**
     * 페이징 정보 설정
     */
    public void setPaging(int page, int pageSize) {
        this.pageSize = pageSize;
        this.offset = (page - 1) * pageSize;
        this.startRow = this.offset;
        this.endRow = this.offset + pageSize;
    }

    /**
     * 검증 메서드
     */
    public boolean isValid() {
        return userId != null && !userId.trim().isEmpty() &&
               userName != null && !userName.trim().isEmpty() &&
               email != null && !email.trim().isEmpty();
    }

    @Override
    public String toString() {
        return "UserDDTO{" +
                "userId='" + userId + '\'' +
                ", userName='" + userName + '\'' +
                ", email='" + email + '\'' +
                ", phone='" + phone + '\'' +
                ", role='" + role + '\'' +
                ", status='" + status + '\'' +
                ", searchKeyword='" + searchKeyword + '\'' +
                ", startRow=" + startRow +
                ", endRow=" + endRow +
                ", pageSize=" + pageSize +
                ", offset=" + offset +
                '}';
    }
}
```

#### **6. 데이터베이스 설정**

**✅ MyBatis 설정**
```java
/**
 * MyBatis 설정 클래스
 * 
 * 프로그램명: MyBatisConfig.java
 * 설명: MyBatis 관련 설정을 담당하는 클래스
 * 작성일: 2024-01-01
 * 작성자: SKAX Project Team
 * 
 * 주요 기능:
 * - SqlSessionFactory 설정
 * - Mapper 스캔 설정
 * - 트랜잭션 매니저 설정
 * 
 * @version 1.0
 */
@Configuration
@Profile({ "mybatis", "default" })
@MapperScan(basePackages = "com.skax.eatool.mbc.dc.usermgtdc.mapper")
public class MyBatisConfig {

    /**
     * SqlSessionFactory 설정
     * 
     * @param dataSource 데이터소스
     * @return SqlSessionFactory
     * @throws Exception 설정 오류
     */
    @Bean
    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {
        SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();
        sessionFactory.setDataSource(dataSource);

        // Mapper XML 파일 위치 설정
        sessionFactory.setMapperLocations(
                new PathMatchingResourcePatternResolver().getResources("classpath:mapper/*.xml"));

        // MyBatis 설정
        org.apache.ibatis.session.Configuration configuration = new org.apache.ibatis.session.Configuration();
        configuration.setMapUnderscoreToCamelCase(true);
        configuration.setLogImpl(org.apache.ibatis.logging.stdout.StdOutImpl.class);
        sessionFactory.setConfiguration(configuration);

        return sessionFactory.getObject();
    }

    /**
     * 트랜잭션 매니저 설정
     * 
     * @param dataSource 데이터소스
     * @return PlatformTransactionManager
     */
    @Bean
    public PlatformTransactionManager transactionManager(DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }
}
```

### **🚫 NEVER DO - 데이터베이스 구현 위반사항**

#### **1. 잘못된 Repository 패턴**
```java
// ❌ 잘못된 예시
@Service
public class UserService {
    
    @Autowired
    private JdbcTemplate jdbcTemplate;
    
    public User getUser(String userId) {
        String sql = "SELECT * FROM users WHERE user_id = ?";
        return jdbcTemplate.queryForObject(sql, new Object[]{userId}, User.class);
    }
}

// ✅ 올바른 예시
@Service
public class UserService {
    
    @Autowired
    private UserRepository userRepository;
    
    public User getUser(String userId) throws NewBusinessException {
        return userRepository.getUserById(userId);
    }
}
```

#### **2. 잘못된 타입 안전성**
```java
// ❌ 잘못된 예시
public class UserRepository {
    
    public List<Map<String, Object>> getUsers() {
        // Map 사용으로 타입 안전성 없음
        return jdbcTemplate.queryForList("SELECT * FROM users");
    }
}

// ✅ 올바른 예시
public class UserRepository {
    
    public List<User> getUsers() throws NewBusinessException {
        // 강타입 사용으로 타입 안전성 보장
        return userMapper.selectAllUsers();
    }
}
```

#### **3. 잘못된 SQL 쿼리**
```java
// ❌ 잘못된 예시
public class UserRepository {
    
    public void insertUser(String userId, String userName) {
        String sql = "INSERT INTO users VALUES ('" + userId + "', '" + userName + "')";
        // SQL Injection 위험
        jdbcTemplate.execute(sql);
    }
}

// ✅ 올바른 예시
public class UserRepository {
    
    public int insertUser(UserDDTO userDDTO) throws NewBusinessException {
        return userMapper.insertUser(userDDTO);
    }
}
```

### **📋 데이터베이스 구현 체크리스트**

#### **새로운 Repository 생성 시**
- [ ] Repository 인터페이스 정의
- [ ] Repository 구현체 생성
- [ ] Mapper 인터페이스 정의
- [ ] XML Mapper 파일 생성
- [ ] Entity 클래스 정의
- [ ] DTO 클래스 정의

#### **타입 안전성 규칙**
- [ ] 강타입 사용 (Map 대신 Entity/DTO)
- [ ] 제네릭 타입 활용
- [ ] null 체크 구현
- [ ] 예외 처리 구현

#### **SQL 쿼리 규칙**
- [ ] PreparedStatement 사용
- [ ] SQL Injection 방지
- [ ] 동적 쿼리 활용
- [ ] 페이징 처리 구현

#### **성능 최적화**
- [ ] 인덱스 활용
- [ ] 쿼리 최적화
- [ ] 커넥션 풀 설정
- [ ] 캐싱 전략 수립

### **🔧 특별한 데이터베이스 패턴**

#### **1. 페이징 처리**
```java
/**
 * 페이징 결과 DTO
 */
public class PagingResult<T> {
    private List<T> data;
    private int totalCount;
    private int currentPage;
    private int pageSize;
    private int totalPages;
    
    public PagingResult(List<T> data, int totalCount, int currentPage, int pageSize) {
        this.data = data;
        this.totalCount = totalCount;
        this.currentPage = currentPage;
        this.pageSize = pageSize;
        this.totalPages = (int) Math.ceil((double) totalCount / pageSize);
    }
    
    // Getters and Setters
    public List<T> getData() {
        return data;
    }
    
    public void setData(List<T> data) {
        this.data = data;
    }
    
    public int getTotalCount() {
        return totalCount;
    }
    
    public void setTotalCount(int totalCount) {
        this.totalCount = totalCount;
    }
    
    public int getCurrentPage() {
        return currentPage;
    }
    
    public void setCurrentPage(int currentPage) {
        this.currentPage = currentPage;
    }
    
    public int getPageSize() {
        return pageSize;
    }
    
    public void setPageSize(int pageSize) {
        this.pageSize = pageSize;
    }
    
    public int getTotalPages() {
        return totalPages;
    }
    
    public void setTotalPages(int totalPages) {
        this.totalPages = totalPages;
    }
}
```

#### **2. 트랜잭션 관리**
```java
@Service
@Transactional
public class UserService {
    
    @Autowired
    private UserRepository userRepository;
    
    /**
     * 사용자 등록 (트랜잭션 포함)
     */
    @Transactional(rollbackFor = {NewBusinessException.class})
    public UserDto createUser(UserDDTO userDDTO) throws NewBusinessException {
        try {
            // 1. 사용자 검증
            validateUser(userDDTO);
            
            // 2. 중복 체크
            if (userRepository.existsUser(userDDTO.getUserId())) {
                throw new NewBusinessException("이미 존재하는 사용자입니다.");
            }
            
            // 3. 사용자 등록
            int result = userRepository.insertUser(userDDTO);
            
            if (result > 0) {
                return UserDto.from(userRepository.getUserById(userDDTO.getUserId()));
            } else {
                throw new NewBusinessException("사용자 등록에 실패했습니다.");
            }
            
        } catch (NewBusinessException e) {
            throw e;
        } catch (Exception e) {
            throw new NewBusinessException("사용자 등록 중 오류가 발생했습니다.", e);
        }
    }
}
```

#### **3. 배치 처리**
```java
@Service
@Transactional
public class BatchUserService {
    
    @Autowired
    private UserRepository userRepository;
    
    /**
     * 배치 사용자 등록
     */
    @Transactional(rollbackFor = {NewBusinessException.class})
    public BatchResult createUsersBatch(List<UserDDTO> userDDTOs) throws NewBusinessException {
        BatchResult result = new BatchResult();
        
        for (UserDDTO userDDTO : userDDTOs) {
            try {
                userRepository.insertUser(userDDTO);
                result.addSuccess(userDDTO.getUserId());
            } catch (Exception e) {
                result.addFailure(userDDTO.getUserId(), e.getMessage());
            }
        }
        
        return result;
    }
}
```

### **⚠️ 주의사항**

1. **타입 안전성**: Map 대신 강타입 Entity/DTO 사용
2. **SQL Injection 방지**: PreparedStatement 사용
3. **트랜잭션 관리**: 적절한 트랜잭션 경계 설정
4. **성능 최적화**: 인덱스 활용 및 쿼리 최적화
5. **에러 처리**: 모든 데이터베이스 작업에서 예외 처리

이 가이드를 따라 데이터베이스 구현을 하면 타입 안전하고 유지보수하기 쉬운 백엔드 서비스를 구축할 수 있습니다.
## 데이터베이스 표준
1. 테이블/컬렉션 설계원칙
    - 명명규칙
        - 테이블/컬렉션
        - 컬럼/필드
        - 기본키
        - 외래키
    - 정규화/비정규화
    - 데이터 타입
    - 타입스탬프
    여기에 대한 규칙을 정해줘
2. 쿼리 작성 원칙
    - SELECT
    - JOIN
    - WHERE
    - 대량 데이터 처리
    이 규칙에 대한 정리를 부탁해
3. 인덱싱 전략
    이 전략에 대해서 부탁해
4. 스키마 마이그레이션
    어떤 진행해야 되는 원칙을 정해줘
5. 데이터베이스 기술별 상셰 가이드
    - 스키마 구조 표준
6. 인덱스 전략 및 성능 최적화
    - 인첵스 설계원칙
    - 쿼리 최적화 패턴 
7. 데이터 마이그레이션 및 시드 데이터
8. 백업 및 복구 전략
9. 모니터링 및 백업 실행

1-9까지의 룰을 정해줘
---
