# 👨‍💻 Role-Based Prompting - 역할별 가이드

## 🎭 역할별 접근 방식 (Role-Based Approach)

### 1. 🏗️ 아키텍트 역할 (Architect Role)
**역할**: 전체 시스템 설계 및 구조 결정

#### 사고 과정:
```
1. 모듈 간 의존성 분석
2. 패키지 구조 설계
3. 컴포넌트 간 인터페이스 정의
4. 데이터 흐름 설계
5. 확장성 및 유지보수성 고려
```

#### 반드시 해야 할 것:
- 전체 시스템 구조를 먼저 설계
- 모듈 간 의존성을 명확히 정의
- 확장 가능한 패키지 구조 설계
- 인터페이스 우선 설계

#### 절대 하지 말 것:
- 단일 모듈에만 집중
- 의존성 순환 구조 생성
- 확장 불가능한 구조 설계

### 2. 🎨 디자이너 역할 (Designer Role)
**역할**: 코드 구조 및 패턴 설계

#### 사고 과정:
```
1. 적절한 디자인 패턴 선택
2. 클래스 구조 설계
3. 메서드 시그니처 정의
4. 예외 처리 전략 수립
5. 로깅 전략 수립
```

#### 반드시 해야 할 것:
- SOLID 원칙 준수
- 적절한 디자인 패턴 적용
- 일관된 네이밍 컨벤션 적용
- 예외 처리 계층 구조 설계

#### 절대 하지 말 것:
- 안티 패턴 사용
- 일관성 없는 네이밍
- 예외 처리 무시

### 3. 👨‍💻 개발자 역할 (Developer Role)
**역할**: 실제 코드 구현

#### 사고 과정:
```
1. 요구사항을 코드로 변환
2. 적절한 Spring Boot 어노테이션 사용
3. 의존성 주입 구현
4. 예외 처리 구현
5. 로깅 구현
```

#### 반드시 해야 할 것:
- 생성자 주입 사용
- 적절한 어노테이션 사용
- 예외 처리 구현
- 로깅 구현

#### 절대 하지 말 것:
- 필드 주입 사용
- 어노테이션 생략
- 예외 처리 무시
- 로깅 무시

### 4. 🧪 테스터 역할 (Tester Role)
**역할**: 코드 품질 및 테스트 가능성 검증

#### 사고 과정:
```
1. 테스트 가능한 구조인가?
2. 모킹이 가능한가?
3. 예외 상황이 모두 처리되었는가?
4. 로깅이 적절한가?
5. 성능 이슈는 없는가?
```

#### 반드시 해야 할 것:
- 단위 테스트 가능한 구조 설계
- 의존성 주입을 통한 모킹 가능성 확보
- 모든 예외 상황 테스트
- 로깅 테스트

#### 절대 하지 말 것:
- 테스트 불가능한 구조 설계
- 정적 메서드 남용
- 예외 상황 무시

### 5. 🔍 리뷰어 역할 (Reviewer Role)
**역할**: 코드 품질 및 컨벤션 검토

#### 사고 과정:
```
1. 명명 규칙이 올바른가?
2. 패키지 구조가 올바른가?
3. 어노테이션이 적절한가?
4. 예외 처리가 적절한가?
5. 로깅이 적절한가?
```

#### 반드시 해야 할 것:
- 명명 규칙 엄격 준수
- 패키지 구조 규칙 준수
- 어노테이션 적절성 검토
- 예외 처리 적절성 검토

#### 절대 하지 말 것:
- 명명 규칙 위반 허용
- 패키지 구조 위반 허용
- 어노테이션 오용 허용

## 🎯 역할별 체크리스트 (Role-Based Checklist)

### 🏗️ 아키텍트 체크리스트
- [ ] 모듈 간 의존성이 명확한가?
- [ ] 패키지 구조가 확장 가능한가?
- [ ] 인터페이스가 적절히 정의되었는가?
- [ ] 데이터 흐름이 명확한가?

### 🎨 디자이너 체크리스트
- [ ] 적절한 디자인 패턴이 적용되었는가?
- [ ] SOLID 원칙이 준수되었는가?
- [ ] 일관된 네이밍이 사용되었는가?
- [ ] 예외 처리 전략이 수립되었는가?

### 👨‍💻 개발자 체크리스트
- [ ] 생성자 주입이 사용되었는가?
- [ ] 적절한 어노테이션이 사용되었는가?
- [ ] 예외 처리가 구현되었는가?
- [ ] 로깅이 구현되었는가?

### 🧪 테스터 체크리스트
- [ ] 단위 테스트가 가능한가?
- [ ] 모킹이 가능한가?
- [ ] 모든 예외 상황이 테스트되었는가?
- [ ] 로깅이 테스트되었는가?

### 🔍 리뷰어 체크리스트
- [ ] 명명 규칙이 준수되었는가?
- [ ] 패키지 구조가 올바른가?
- [ ] 어노테이션이 적절한가?
- [ ] 예외 처리가 적절한가?

## 🚨 역할별 주의사항 (Role-Based Warnings)

### 🏗️ 아키텍트 주의사항
**절대 하지 말 것:**
- 단일 책임 원칙 위반
- 의존성 순환 구조 생성
- 확장 불가능한 구조 설계

**반드시 해야 할 것:**
- 전체 시스템 관점에서 설계
- 모듈 간 결합도 최소화
- 확장 가능한 구조 설계

### 🎨 디자이너 주의사항
**절대 하지 말 것:**
- 안티 패턴 사용
- 일관성 없는 네이밍
- 예외 처리 무시

**반드시 해야 할 것:**
- 적절한 디자인 패턴 적용
- 일관된 네이밍 컨벤션 적용
- 예외 처리 계층 구조 설계

### 👨‍💻 개발자 주의사항
**절대 하지 말 것:**
- 필드 주입 사용
- 어노테이션 생략
- 예외 처리 무시
- 로깅 무시

**반드시 해야 할 것:**
- 생성자 주입 사용
- 적절한 어노테이션 사용
- 예외 처리 구현
- 로깅 구현

### 🧪 테스터 주의사항
**절대 하지 말 것:**
- 테스트 불가능한 구조 설계
- 정적 메서드 남용
- 예외 상황 무시

**반드시 해야 할 것:**
- 단위 테스트 가능한 구조 설계
- 의존성 주입을 통한 모킹 가능성 확보
- 모든 예외 상황 테스트

### 🔍 리뷰어 주의사항
**절대 하지 말 것:**
- 명명 규칙 위반 허용
- 패키지 구조 위반 허용
- 어노테이션 오용 허용

**반드시 해야 할 것:**
- 명명 규칙 엄격 준수
- 패키지 구조 규칙 준수
- 어노테이션 적절성 검토

## 📚 역할별 참고 문서

### 🏗️ 아키텍트 참고 문서
- [프로젝트 구조 가이드](mdc:PROJECT_STRUCTURE.md)
- [핵심 규칙](mdc:.cursor/rules/critical-rules.mdc)

### 🎨 디자이너 참고 문서
- [Spring Boot 패턴](mdc:.cursor/rules/spring-boot-patterns-optimized.mdc)
- [명명 규칙](mdc:.cursor/rules/naming-conventions.mdc)

### 👨‍💻 개발자 참고 문서
- [코딩 컨벤션](mdc:.cursor/rules/coding-standards.mdc)
- [개발 워크플로우](mdc:.cursor/rules/development-workflow.mdc)

### 🧪 테스터 참고 문서
- [개발 가이드](mdc:zDoc/mbc-java-guide.md)
- [코딩 컨벤션](mdc:.cursor/rules/coding-standards.mdc)

### 🔍 리뷰어 참고 문서
- [핵심 규칙](mdc:.cursor/rules/critical-rules.mdc)
- [명명 규칙](mdc:.cursor/rules/naming-conventions.mdc)
description:
globs:
alwaysApply: false
---
