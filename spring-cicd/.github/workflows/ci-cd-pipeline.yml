name: SKAX EATool Eplaton CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NAMESPACE: skax-eatool
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.9.5'

jobs:
  # 1. 코드 품질 검사
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run SonarQube Analysis
      uses: sonarqube-quality-gate-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 2. 빌드 및 테스트
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [kji, ksa, mba, mbc, mbc01, apigateway]
        include:
          - module: kji
            path: kji-java
            port: 8080
          - module: ksa
            path: ksa-java
            port: 8080
          - module: mba
            path: mba-java
            port: 8084
          - module: mbc
            path: mbc-java
            port: 8085
          - module: mbc01
            path: mbc01-java
            port: 8080
          - module: apigateway
            path: spring-cloud-apigateway-service
            port: 8000
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build ${{ matrix.module }}
      run: |
        cd ${{ matrix.path }}
        mvn clean compile -B
        
    - name: Run unit tests
      run: |
        cd ${{ matrix.path }}
        mvn test -B
        
    - name: Run integration tests
      run: |
        cd ${{ matrix.path }}
        mvn verify -B -DskipUnitTests=true
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.module }}
        path: ${{ matrix.path }}/target/surefire-reports/
        retention-days: 30

  # 3. 보안 스캔
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 4. Docker 이미지 빌드
  build-images:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    strategy:
      matrix:
        module: [kji, ksa, mba, mbc, mbc01, apigateway]
        include:
          - module: kji
            path: kji-java
            dockerfile: kji-java/Dockerfile
          - module: ksa
            path: ksa-java
            dockerfile: ksa-java/Dockerfile
          - module: mba
            path: mba-java
            dockerfile: mba-java/Dockerfile
          - module: mbc
            path: mbc-java
            dockerfile: mbc-java/Dockerfile
          - module: mbc01
            path: mbc01-java
            dockerfile: mbc01-java/Dockerfile
          - module: apigateway
            path: spring-cloud-apigateway-service
            dockerfile: spring-cloud-apigateway-service/Dockerfile
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.module }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # 5. 개발 환경 배포
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'development'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl for development
      run: |
        echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml
        
    - name: Deploy to Development
      run: |
        chmod +x ./scripts/deploy.sh
        ./scripts/deploy.sh development ${{ github.sha }}
        
    - name: Run smoke tests
      run: |
        chmod +x ./scripts/smoke-tests.sh
        ./scripts/smoke-tests.sh development

  # 6. 스테이징 환경 배포
  deploy-staging:
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl for staging
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml
        
    - name: Deploy to Staging
      run: |
        chmod +x ./scripts/deploy.sh
        ./scripts/deploy.sh staging ${{ github.sha }}
        
    - name: Run integration tests
      run: |
        chmod +x ./scripts/integration-tests.sh
        ./scripts/integration-tests.sh staging

  # 7. 프로덕션 환경 배포
  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'release' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl for production
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml
        
    - name: Deploy to Production
      run: |
        chmod +x ./scripts/deploy.sh
        ./scripts/deploy.sh production ${{ github.sha }}
        
    - name: Run production tests
      run: |
        chmod +x ./scripts/production-tests.sh
        ./scripts/production-tests.sh

  # 8. 알림
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always()
    
    steps:
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          Deployment Status: ${{ job.status }}
          Environment: ${{ github.event.inputs.environment || 'auto' }}
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref }} 