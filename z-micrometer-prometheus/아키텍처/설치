1. pom.xml
-------------------------------------------------
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>

2. application.xml
-------------------------------------------------
management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, busrefresh, info, metrics, prometheus       

3. @Timed 어노테이션 선언
-------------------------------------------------
    @GetMapping("/health_check")
    @Timed(value="users.status", longTask = true)
    public String status() {
        return String.format("It's Working in User Service"
                + ", port(local.server.port)=" + env.getProperty("local.server.port")
                + ", port(server.port)=" + env.getProperty("server.port")
                + ", gateway ip=" + env.getProperty("gateway.ip")
                + ", message=" + env.getProperty("greeting.message")
                + ", token secret=" + env.getProperty("token.secret")
                + ", token expiration time=" + env.getProperty("token.expiration_time"));
    }
    
    @GetMapping("/welcome")
    @Timed(value="users.welcome", longTask = true)
    public String welcome(HttpServletRequest request, HttpServletResponse response) {
//        Cookie[] cookies = request.getCookies();
//        if (cookies != null) {
//            Arrays.stream(cookies).forEach(cookie -> {
//                System.out.print(cookie.getName() + "=" + cookie.getValue());
//            });
//        }
//        Cookie c1 = new Cookie("myuser_token", "abcd1234");
//        response.addCookie(c1);

//        return env.getProperty("greeting.message");
    	
    	System.out.println("===========" +  greeting.getMessage());
//    	return env.getProperty("greeting.message");
        return greeting.getMessage();
    }
    
    
        
		
